Information:
        No prefix is information about the task or command that follows
-       as prefix is something you need to do
>       as prefix is a command you need to execute locally
pi>     as prefix is a command you need to execute on the pi through an ssh session
>>>>    starts a block of text that you need to paste in the file you just opened or created
<<<<    Ends the block of text that needs to be copied
<TAB>   If something is tabbed, it is optional and is based on the information above the command or task

++++++++++++++++++++++++++ WSL ++++++++++++++++++++++++++
If you want to use WSL, use WSL1. WSL2 does not work due to forced network NATing.

Add the environment variable to .profile
> echo "RPI_ADDRESS=<rpi_address>" >> ~/.profile          |ex. echo "RPI_ADDRESS=10.0.0.104" >> ~/.profile
And add the environment variable to .bashrc
> echo "RPI_ADDRESS=<rpi_address>" >> ~/.bashrc          |ex. echo "RPI_ADDRESS=10.0.0.104" >> ~/.bashrc

Add environment variable to windows to link WSL and windows
- Start > Search: 'Edit the system environment variables' > Click: 'Environment Variables...' > Add new user variable: 'WSLENV=RPI_ADDRESS'

++++++++++++++++++++++++++ Installing Ubuntu ++++++++++++++++++++++++++
- Install Ubuntu 20.04

- Open a terminal window

Update Ubuntu
> sudo apt update && sudo apt upgrade

Install Visual Studio Code insiders
> sudo snap install --classic code-insiders

Install other required software
> sudo apt install git

++++++++++++++++++++++++++ Cloning repo ++++++++++++++++++++++++++
Create a new working directory that is the same as this guide for easy reference
> sudo mkdir /data
> sudo chmod 777 /data

Configure git (Special email can be found on the github settings page of your account https://github.com/settings/emails)
> git config --global user.name "<username>"                |ex. git config --global user.name "Zamtakk"
> git config --global user.email "<special_github_email>"   |ex. git config --global user.email "28710885+Zamtakk@users.noreply.github.com"
> git config --global credential.helper store

Create folders for repo
> mkdir /data/rpi_code_project_system_development_2020
> mkdir /data/wemos_code_project_system_development_2020

Clone repo using git
> git clone https://github.com/Zamtakk/Project_System_Development_2020_RPi_Code.git /data/rpi_code_project_system_development_2020/
> git clone https://github.com/Zamtakk/Project_System_Development_2020_Wemos_Code.git /data/wemos_code_project_system_development_2020/

++++++++++++++++++++++++++ Installing Raspberry ++++++++++++++++++++++++++
Install raspberry pi imager
> sudo snap install rpi-imager

- Insert SD card in computer
- Run imager
- Select Pi OS (Other) > Pi OS Lite (32bit)
- Select SD Card
- Click write

If the card is auto ejected
    - Remove SD card and reinsert it into the computer to reconnect

Enable SSH by creating a file in the root of the sd card.
- Open a terminal in the boot partition of the card. (Can be done with rightclick in the files app)
Create a file in the boot of the SD card called "ssh"
> touch ssh
Create a file in the boot of the SD card for the network settings (Use a hotspot on your phone if a normal wifi network is not available)
> nano wpa_supplicant.conf
>>>>
country=NL
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
    ssid="<existing_wifi_name>"
    psk="<wifipassword>"
}
<<<<
- Eject the SD card and insert in Raspberry Pi
- Boot the Pi

- Find the IP address the pi uses. Use the router client list or scan with wireshark while you boot the pi.

Add RPi address to the environment variables to easily access it. (use sudo -i instead of directly sudo)
> sudo -i
> echo "RPI_ADDRESS=<rpi_address>" >> /etc/environment          |ex. echo "RPI_ADDRESS=10.0.0.104" >> /etc/environment
> exit

- Reboot Ubuntu for these changes to take effect. (Logout is not enough)

++++++++++++++++++++++++++ Setup SSH and passwordless access ++++++++++++++++++++++++++
Test ssh to the pi (Don't replace $RPI_ADDRESS, this uses the environment variable that was set earlier)
This can sometimes be refused the first time, just try again.
> ssh pi@$RPI_ADDRESS
Enter password
> raspberry
If it works, exit ssh with command
    > exit
If it doesn't work, make sure your pi is connected and the IP address set in /etc/environment is correct. Reboot after changing /etc/environment!!

Now we will setup SSH keys for passwordless access
Navigate to the ssh folder in a linux terminal
> cd ~/.ssh
Check if existing keys are present
> ls -la
If there are no files named 'id_rsa.pub' and 'id_rsa'
    Create new keys (No sudo!!)
    > ssh-keygen
    - Hit enter three times

Now we will copy the needed files to the pi
> cat ~/.ssh/id_rsa.pub | ssh pi@$RPI_ADDRESS 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys'
Type in the raspberry pi password
> raspberry
Check if you can ssh without giving password
> ssh pi@$RPI_ADDRESS
If a password was still asked
    - Cancel the operation with Ctrl + C
    Remove all existing ssh keys
    > rm ~/.ssh/*rsa*
    - Go back and start from the beginning of the previous paragraph

Update the pi
pi> sudo apt update && sudo apt upgrade
Install required software
pi> sudo apt install gdbserver
Exit the pi
pi> exit

++++++++++++++++++++++++++ Setup Toolchains and software ++++++++++++++++++++++++++
Install all required software
> sudo apt install g++-arm-linux-gnueabihf gdb-multiarch sshpass make python3-distutils

++++++++++++++++++++++++++ Setup Visual Studio Code for RPi ++++++++++++++++++++++++++
- Open Visual Studio Code
- Go to the extention tab (search by name, not creator)
- Install: Tasks by actboy168
- Install: StatusBar Debugger by Fabio Spampinato
- Install: C/C++ by Microsoft
- Install: Native Debug by WebFreak

Open the repo for rpi_code
- Ctrl + K -> Ctrl + O
- Navigate to /data/rpi_code_project_system_development_2020

VSCode will now ask to reload VSCode a few times with a message in the bottom right
- Click reload in the message in the bottom right until it stops asking.

Edit user settings file
- Shift + Ctrl + P
- Type in: 'Preferences: Open Settings (JSON)'
- Hit enter
>>>>
{
    "debug.showInStatusBar": "never",
    "debug.toolBarLocation": "hidden"
}
<<<<
- Save the file and close it.

++++++++++++++++++++++++++ Setup Visual Studio Code for Wemos ++++++++++++++++++++++++++
Always open a new window for wemos development, do not add them to the same workspace. RPi and Wemos compilers bite.
- Shift + Ctrl + N

- Go to the extention tab (search by name, not creator)
- Install: PlatformIO IDE by PlatformIO

Open the wemos_code folder in the wemos repo
- Ctrl + K -> Ctrl + O
- Navigate to /data/wemos_code_project_system_development_2020/Wemos_Code

Open a terminal
- Ctrl + Alt + T

Add your user to the dialout group
> sudo usermod -a -G dialout <username>

- You need to reboot your computer for this last change to take effect. (Logout does not work)

++++++++++++++++++++++++++ Other usefull extentions ++++++++++++++++++++++++++
- Go to the extention tab (search by name, not creator)
- Install: Git History by Don Jayamanne